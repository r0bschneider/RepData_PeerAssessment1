mx <- makeCacheMatrix(x)
cacheSolve(mx)
x <- matrix(rand(1:4, 2, 2)))
x <- matrix(rnorm(), 2, 2)))
x <- matrix(rnorm(4), 2, 2)))
x <- matrix(rnorm(4), 2, 2))
x <- matrix(rnorm(4), 2, 2)
x
mx <- makeCacheMatrix(x)
cacheSolve(mx)
x <- matrix(rnorm(4), 2, 2)
x
mx <- makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL          # inv will store inverterted matrix
set <- function(y) { # define set function to
x <<- y      # set matrix and
inv <<- NULL # clear the cache
}
get <- function() x  # define function to get the matrix
setInv <- function(inverse) inv <<- inverse # define function to
getInv <- function() inv
list(set = set,
get = get,
setInv = setInv,
getInv = getInv)
}
## Function to compute the invers of
cacheSolve <- function(x, ...) {
# Return a matrix with the inverted vales of 'x' (using solve)
inv <- x$getInv()
# If the inverse is already calculated, return from cache
if (!is.null(inv)) {
message("Getting cached data")
return(inv)
}
# Calculate the inverses
data <- x$get()
inv <- solve(data, ...)
# cache the inversed matrix
x$setInv(inv)
# return inverted matrix
inv
}
## x <- matrix(rnorm(4), 2, 2)    - define x as input matrix
## mx <- makeCacheMatrix(x)       - create special matrix object
## cachSolve(mx)                  - return the inverse matrix
x <- matrix(rnorm(4), 2, 2)
mx <-cacheSolve(x)
cacheSolve(mx)
x
mx <-cacheSolve(x)
cacheSolve(mx)
cacheSolve(mx)
rm(list=ls())
library(reshape2)
clean.file <- "cleaned.txt"
extracted.features <- c(1, 2, 3, 4, 5, 6, 41, 42, 43, 44, 45, 46, 81, 82, 83, 84, 85, 86, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 201, 202, 214, 215, 227, 228, 240, 241, 253, 254, 266, 267, 268, 269, 270, 271, 345, 346, 347, 348, 349, 350, 424, 425, 426, 427, 428, 429, 503, 504, 516, 517, 529, 530, 542, 543)
extracted.feature.names <- c("tBodyAcc-mean()-X", "tBodyAcc-mean()-Y", "tBodyAcc-mean()-Z", "tBodyAcc-std()-X", "tBodyAcc-std()-Y", "tBodyAcc-std()-Z", "tGravityAcc-mean()-X", "tGravityAcc-mean()-Y", "tGravityAcc-mean()-Z", "tGravityAcc-std()-X", "tGravityAcc-std()-Y", "tGravityAcc-std()-Z", "tBodyAccJerk-mean()-X", "tBodyAccJerk-mean()-Y", "tBodyAccJerk-mean()-Z", "tBodyAccJerk-std()-X", "tBodyAccJerk-std()-Y", "tBodyAccJerk-std()-Z", "tBodyGyro-mean()-X", "tBodyGyro-mean()-Y", "tBodyGyro-mean()-Z", "tBodyGyro-std()-X", "tBodyGyro-std()-Y", "tBodyGyro-std()-Z", "tBodyGyroJerk-mean()-X", "tBodyGyroJerk-mean()-Y", "tBodyGyroJerk-mean()-Z", "tBodyGyroJerk-std()-X", "tBodyGyroJerk-std()-Y", "tBodyGyroJerk-std()-Z", "tBodyAccMag-mean()", "tBodyAccMag-std()", "tGravityAccMag-mean()", "tGravityAccMag-std()", "tBodyAccJerkMag-mean()", "tBodyAccJerkMag-std()", "tBodyGyroMag-mean()", "tBodyGyroMag-std()", "tBodyGyroJerkMag-mean()", "tBodyGyroJerkMag-std()", "fBodyAcc-mean()-X", "fBodyAcc-mean()-Y", "fBodyAcc-mean()-Z", "fBodyAcc-std()-X", "fBodyAcc-std()-Y", "fBodyAcc-std()-Z", "fBodyAccJerk-mean()-X", "fBodyAccJerk-mean()-Y", "fBodyAccJerk-mean()-Z", "fBodyAccJerk-std()-X", "fBodyAccJerk-std()-Y", "fBodyAccJerk-std()-Z", "fBodyGyro-mean()-X", "fBodyGyro-mean()-Y", "fBodyGyro-mean()-Z", "fBodyGyro-std()-X", "fBodyGyro-std()-Y", "fBodyGyro-std()-Z", "fBodyAccMag-mean()", "fBodyAccMag-std()", "fBodyBodyAccJerkMag-mean()", "fBodyBodyAccJerkMag-std()", "fBodyBodyGyroMag-mean()", "fBodyBodyGyroMag-std()", "fBodyBodyGyroJerkMag-mean()", "fBodyBodyGyroJerkMag-std()")
extracted.feature.names <- c("tBodyAcc-mean()-X", "tBodyAcc-mean()-Y", "tBodyAcc-mean()-Z", "tBodyAcc-std()-X", "tBodyAcc-std()-Y", "tBodyAcc-std()-Z", "tGravityAcc-mean()-X", "tGravityAcc-mean()-Y", "tGravityAcc-mean()-Z", "tGravityAcc-std()-X", "tGravityAcc-std()-Y", "tGravityAcc-std()-Z", "tBodyAccJerk-mean()-X", "tBodyAccJerk-mean()-Y", "tBodyAccJerk-mean()-Z", "tBodyAccJerk-std()-X", "tBodyAccJerk-std()-Y", "tBodyAccJerk-std()-Z", "tBodyGyro-mean()-X", "tBodyGyro-mean()-Y", "tBodyGyro-mean()-Z", "tBodyGyro-std()-X", "tBodyGyro-std()-Y", "tBodyGyro-std()-Z", "tBodyGyroJerk-mean()-X", "tBodyGyroJerk-mean()-Y", "tBodyGyroJerk-mean()-Z", "tBodyGyroJerk-std()-X", "tBodyGyroJerk-std()-Y", "tBodyGyroJerk-std()-Z", "tBodyAccMag-mean()", "tBodyAccMag-std()", "tGravityAccMag-mean()", "tGravityAccMag-std()", "tBodyAccJerkMag-mean()", "tBodyAccJerkMag-std()", "tBodyGyroMag-mean()", "tBodyGyroMag-std()", "tBodyGyroJerkMag-mean()", "tBodyGyroJerkMag-std()", "fBodyAcc-mean()-X", "fBodyAcc-mean()-Y", "fBodyAcc-mean()-Z", "fBodyAcc-std()-X", "fBodyAcc-std()-Y", "fBodyAcc-std()-Z", "fBodyAccJerk-mean()-X", "fBodyAccJerk-mean()-Y", "fBodyAccJerk-mean()-Z", "fBodyAccJerk-std()-X", "fBodyAccJerk-std()-Y", "fBodyAccJerk-std()-Z", "fBodyGyro-mean()-X", "fBodyGyro-mean()-Y", "fBodyGyro-mean()-Z", "fBodyGyro-std()-X", "fBodyGyro-std()-Y", "fBodyGyro-std()-Z", "fBodyAccMag-mean()", "fBodyAccMag-std()", "fBodyBodyAccJerkMag-mean()", "fBodyBodyAccJerkMag-std()", "fBodyBodyGyroMag-mean()", "fBodyBodyGyroMag-std()", "fBodyBodyGyroJerkMag-mean()", "fBodyBodyGyroJerkMag-std()")
activities <- c(1, 2, 3, 4, 5, 6)
activity.names <- c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING", "LAYING")
p <- function(...) {
cat("[run_analysis.R]", ..., "\n")
}
features.file <- function(name) {
paste("X_", name, ".txt", sep = "")
}
activities.file <- function(name) {
paste("Y_", name, ".txt", sep = "")
}
subjects.file <- function(name) {
paste("subject_", name, ".txt", sep = "")
}
rm(list=ls())
library(nlme)
library(lattice)
xyplot(weight ~ time | Diet, BodyWeight)
xyplot(weight ~ time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
?BodyWeight
?text()
?axis
?axis()
?trellis.par.set
library(datasets)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
data(airquality)
str(airquality)
qplot(Wind, Ozone, data=airquality, facets= . ~ facotor(Month))
qplot(Wind, Ozone, data=airquality, facets= . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data=airquality, facets = . ~ Month)
rm(airquality)
g <- ggplot(movie, rating, data = movies)
g <- ggplot(movies, rating, data = movies)
g <- ggplot(movies, aes(votes, ratings))
g
g <- g + geom_point()
g
summary(g)
g <- ggplot(movies, aes(votes, rating))
g <- g + geom_point()
g
summary(g)
g <- ggplot(movies, aes(votes, rating))
g
g <- g + geom_point()
g
rm(g)
qplot(votes, rating, data=movies)
g <- qplot(votes, rating, data=movies)
summary(g)
qplot(votes, rating, data=movies) + stats_smooth("loess")
qplot(votes, rating, data=movies, panel = panel.loess)
qplot(votes, rating, data=movies) + geom_smooth()
qplot(votes, rating, data=movies, smooth = "loess")
g <- qplot(votes, rating, data=movies, smooth = "loess")
summary(g)
g <- qplot(votes, rating, data=movies) + geom_smooth("loess")
summary(g)
g <- qplot(votes, rating, data=movies) + geom_smooth("loess")
g
summary(g)
g <- qplot(votes, rating, data=movies, panel = panel.loess)
summary(g)
g <- qplot(votes, rating, data=movies) + geom_smooth("loess")
g <- qplot(votes, rating, data=movies)
g + geom_smooth("loess")
g + geom_smooth("loess")
g + geom_smooth(method= "loess")
g
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
g <- qplot(votes, rating, data = movies) + geom_smooth()
rm(g)
NEI <- readRDS("c:/Users/Owner/Desktop/project2/data/summarySCC_PM25.rds")
SCC <- readRDS("c:/Users/Owner/Desktop/project2/data/Source_Classification_Code.rds")
tapply(NEI$Emissions,NEI$year,sum) -> data
png(filename = 'plot1.png')
barplot( data, xlab = 'Year', ylab = 'Emissions (in tons)', col = 4, main = 'Total emissions' )
dev.off()
dev.off()
barplot( data, xlab = 'Year', ylab = 'Emissions (in tons)', col = 4, main = 'Total emissions' )
rm(data)
BalCyt <- subset(NEI,subset = NEI$fips == '24510')
tapply(BalCyt$Emissions,BalCyt$year,sum) -> data
barplot(data, xlab = 'Year', ylab = 'Emissions (in tons)', pch = 16, col = 4, main = 'Total emissions in Baltimor City' )
rm(data)
rm(BalCyt)
BalCyt <- subset(NEI,subset = NEI$fips == '24510')
BalCyt$type <- factor(BalCyt$type)
BalCyt$type <- factor(BalCyt$type)
g <- ggplot(BalCyt, aes(year, Emissions))
g + geom_point(aes(color = type), size = 3, alpha = 1/2) + facet_grid(.~type) + geom_smooth(aes(group = 1),method = "lm",size = 2,se = FALSE)
g <- ggplot(BalCyt, aes(year, Emissions))
library(ggplot2)
g <- ggplot(BalCyt, aes(year, Emissions))
g + geom_point(aes(color = type), size = 3, alpha = 1/2) + facet_grid(.~type) + geom_smooth(aes(group = 1),method = "lm",size = 2,se = FALSE)
rm(BalCyt)
rm(g)
coal <- SCC[grep("Coal", SCC$EI.Sector), 1]
tmp1 <- NEI[NEI$SCC %in% coal, ]
tmp2 <- SCC[, c(1, 4)]
data_coal <- merge(tmp1, tmp2, by.x = "SCC", by.y = "SCC")
data_coal$EI.Sector <- factor(data_coal$EI.Sector)
qplot(year,Emissions, data = data_coal, facets = .~EI.Sector, geom = c("point", "smooth"), method = "lm", color = EI.Sector)
NEI <- readRDS("c:/Users/Owner/Desktop/project2/data/summarySCC_PM25.rds")
SCC <- readRDS("c:/Users/Owner/Desktop/project2/data/Source_Classification_Code.rds")
BalCyt <- subset(NEI,subset = NEI$fips == '24510')
BalCyt$type <- factor(BalCyt$type)
vehicle <-SCC[grep("On-Road", SCC$EI.Sector), 1]
tmp1 <- BalCyt[BalCyt$SCC %in% vehicle,]
tmp2 <- SCC[,c(1, 4)]
data_vehicle <- merge(tmp1, tmp2,  by.x = "SCC", by.y = "SCC")
data_vehicle <- data_vehicle[data_vehicle$Emissions < 20, ]
library(ggplot2)
g <- ggplot(data_vehicle, aes(year, Emissions))
g + geom_point(size = 3, aes(color= EI.Sector)) + facet_grid(.~EI.Sector) + geom_smooth(aes(group = 1),method = "lm", se = FALSE, size = 1) + theme_light()
rm(tmp1)
rm(tmp2)
rm(data_vehicle)
rm(g)
rm(vehicle)
rm(BalCyt)
data <- subset(NEI,subset = ( NEI$fips == '24510' | NEI$fips == '06037' ))
data$fips[which(data$fips == "24510")] <- "Baltimore City"
data$fips[which(data$fips == "06037")] <- "Los Angeles County"
names(data)[1] <- "Cities"
vehicle <-SCC[grep("On-Road", SCC$EI.Sector), 1]
tmp1 <- data[data$SCC %in% vehicle,]
tmp2 <- SCC[,c(1, 4)]
data <- merge(tmp1, tmp2,  by.x = "SCC", by.y = "SCC")
rm(data)
rm(tmp1)
rm(tmp2)
rm(vehicle)
library("plyr")
emissionsByYear <- ddply(NEI, .(year), numcolwise(sum))
with(emissionsByYear, plot(year, Emissions, type='b', pch=19,
main='Total United States Emissions', ylab='Emissions (tons)'))
rm(emissionsByYear)
classList <- (subset(SCC,grepl('Fuel Comb.*Coal',Short.Name)))
coalComb <- subset(NEI,SCC %in% classList$SCC)
agg <- aggregate(coalComb$Emissions,by=list(coalComb$year),FUN=sum)
names(agg) <- c('year','totalEmissions')
with(agg,plot(factor(year),totalEmissions/1e+03,
main=expression('Coal Combustion PM'[2.5]*' Emissions by Year'),
ylab = 'Tons of Emissions in thousands',
xlab = 'Year emissions recorded'))
rm(list=ls())
NEI <- readRDS("c:/Users/Owner/Desktop/project2/data/summarySCC_PM25.rds")
SCC <- readRDS("c:/Users/Owner/Desktop/project2/data/Source_Classification_Code.rds")
head(NEI)
head(SCC)
dim(NEI)
dim(SCC)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
total<- aggregate(NEI$Emissions, list(NEI$year), FUN = "sum")
plot(total, type = "l", xlab = "Year", ylab = expression('Total PM'[2.5]*" Emission" ,
main = "Total Emissions in the United States from 1999 to 2008"))
rm(total)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
totalEmissions <- aggregate(subset$Emissions, list(subset$year), FUN = "sum")
totalEmissions <- aggregate(subset$Emissions, list(subset$year), FUN = "sum")
NEI <- NEI[NEI$fips == "24510", ]
library(ggplot2)
g <- ggplot(NEI, aes(year, Emissions, color = type))
g + geom_line(stat = "summary", fun.y = "sum") + ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle("Total Emissions in Baltimore City from 1999 to 2008")
rm(NEI)
rm(g)
NEI <- readRDS("c:/Users/Owner/Desktop/project2/data/summarySCC_PM25.rds")
head(SCC$Short.Name)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
temp <- grep("coal", SCC$Short.Name, ignore.case = T)
temp <- SCC[temp, ]
temp <- NEI[NEI$SCC %in% temp$SCC, ]
total <- aggregate(temp$Emissions, list(temp$year), FUN = "sum")
plot(total, type = "l", xlab = "Year",ylab = expression('Total PM'[2.5]*" Emission",
main = "Total Emissions From Coal Combustion-related\n Sources from 1999 to 2008"))
rm(temp)
rm(total)
NEI <- NEI[NEI$fips == "24510", ]
temp <- grep("motor", SCC$Short.Name, ignore.case = T)
temp <- SCC[temp, ]
temp <- subset[NEI$SCC %in% temp$SCC, ]
View(temp)
rm(NEI)
rm(temp)
NEI <- readRDS("c:/Users/Owner/Desktop/project2/data/summarySCC_PM25.rds")
rm(list=ls())
install.packages("knitr")
unzip(zipfile = "activity.zip")
unzip(zipfile="activity.zip")
setwd("/Users/Owner/Desktop/Coursera/"RepData_PeerAssessment1"
setwd("/Users/Owner/Desktop/Coursera/RepData_PeerAssessment1"
setwd("/Users/Owner/Desktop/Coursera/RepData_PeerAssessment1")
df <- read.csv("activity.zip")
View(df)
zipfile <- "activity.zip"
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url, destfile = zipfile, method = "curl", quiet = TRUE)
if(!file.exists(zipfile)) {
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url, destfile = zipfile, method = "curl", quiet = TRUE)
}
zipfile <- "./activity.zip"
if(!file.exists(zipfile)) {
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(url, destfile = zipfile, method = "curl", quiet = TRUE)
}
unzip(zipfile)
df <- read.csv("./activity.zip")
df <- read.csv("./activity.csv")
View(df)
head(df)
df<-colClasses = c("integer", "Date", "factor")
df.colClasses = c("integer", "Date", "factor")
rm(df.colClasses)
df <- read.csv("./activity.csv", colClasses)
df <- na.omit(df)
head(df)
str(df)
df$month <- as.numeric(format(df$date, "%m"))
df$month <- as.numeric(format(df$date, "%m"))
(format(df$date, "%m")
str(df)
df <- read.table("./activity.csv",
header=TRUE,
sep=",",
na.strings="NA",
stringsAsFactors=FALSE)
str(df)
df$month <- as.numeric(format(df$date, "%m"))
df$month <- as.numeric(format(df$date, "%M"))
df$month <- as.numeric(df$date)
str(df)
head(df)
df <- read.csv("./activity.csv")
df$month <- as.numeric(df$date)
df$month <- as.numeric(format(df$date, "%m")
df <- read.csv("./activity.csv")
df$month <- as.numeric(format(df$date, "%m"))
df$month <- as.numeric(lapply(format(df$date, "%m")))
df <- read.csv("./activity.csv")
str(df)
total.steps <- tapply(df$steps, df$date, na.rm=TRUE, FUN=sum)
total.steps
View(total.steps)
hist(y=date, y-steps)
hist(y=date, y=steps)
hist(df)
hist(total.steps)
str(total.steps)
dim total.steps
dim(total.steps)
aggregate(steps ~date, FUN=SUM)
aggregate(x=steps by=date, FUN=SUM)
aggregate(x=steps by=date, df=df, FUN=SUM)
x<-aggregate(x=steps by=date, df=df, FUN=SUM)
x<-aggregate(steps ~date, df=df)
df <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
df$month <- as.numeric(format(data$date, "%m"))
df <- read.csv("./activity.csv")
df <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
df$month <- as.numeric(format(data$date, "%m"))
df$month <- as.numeric(format(df$date, "%m"))
str(df)
head(df)
require(ggplot)
require(ggplot2)
df <- read.csv("./activity.csv")
total.steps <- tapply(df$steps, df$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000,
xlab="Date",
main="Total Steps ")
dim(total.steps)
total.steps
df <- read.csv("./activity.csv")
total.steps <- tapply(df$steps, df$date, FUN=sum, na.rm=TRUE)
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "steelblue",
fill = "steelblue",
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps") +
scale_x_descrete(breaks = 1:5, labels = letters[1:5])
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "steelblue",
fill = "steelblue",
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps") +
scale_x_discrete(breaks = 1:5, labels = letters[1:5])
View(total.steps)
scale_x_discrete(breaks = 1:2, labels = c("letters("10/1", 11/30))
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "steelblue",
fill = "steelblue",
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps") +
scale_x_discrete(breaks = 1:2, labels = c("letters("10/1", 11/30))
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "steelblue",
fill = "steelblue",
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps") +
scale_x_discrete(breaks = 1:2, labels = c("letters("10/1", "11/30"))
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "steelblue",
fill = "steelblue",
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps") +
scale_x_discrete(breaks = 1:2, labels = c(letters("10/1", "11/30"))
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "steelblue",
fill = "steelblue",
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps") +
scale_x_discrete(breaks = 1:2, labels = c(letters("10/1", "11/30")))
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "steelblue",
fill = "steelblue",
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps") +
scale_x_discrete(breaks = 1:2, labels = c("10/1", "11/30"))
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "steelblue",
fill = "steelblue",
width = 0.7) +
scale_x_discrete(breaks = 1:2, labels = c("10/1", "11/30")) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps")
View(total.steps)
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "black
fill = "black
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps",
sub = "Period 1-Oct-2012 through 30-Nov-2012")
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "black
fill = "black
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps",
sub = "Period 1-Oct-2012 through 30-Nov-2012")
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "black
fill = "black"
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps",
sub = "Period 1-Oct-2012 through 30-Nov-2012")
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "black"
fill = "black"
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps",
sub = "Period 1-Oct-2012 through 30-Nov-2012")
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "black"
fill = "black"
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps",
sub = "Period 1-Oct-2012 through 30-Nov-2012")
ggplot(df, aes(date, steps)) +
geom_histogram(stat = "identity",
colour = "black",
fill = "black",
width = 0.7) +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps",
sub = "Period 1-Oct-2012 through 30-Nov-2012")
df <- read.csv("./activity.csv")
total.steps <- tapply(df$steps, df$date, FUN=sum, na.rm=TRUE)
average.steps <- aggregate(x=list(steps=df$steps),
by=list(interval=df$interval),
FUN=mean,
na.rm=TRUE)
View(average.steps)
average.steps[which.max(average.steps$steps),]
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.df <- df
filled.df$steps <- mapply(fill.value, filled.df$steps, filled.df$interval)
View(filled.df)
filled.df$steps <- mapply(fill.value, filled.df$steps, filled.df$interval)
filled.df$steps <- mapply(filled.df$steps, filled.df$interval FUN=fill.value)
View(average.steps)
total.steps <- tapply(filled.df$steps, filled.df$date, FUN=sum)
class(total.steps)
df2<-as.data.frame(total.steps)
View(df2)
View(df2)
total.steps <- tapply(filled.df$steps, filled.df$date, FUN=sum)
ggplot(total.steps, aes(date, total.steps))
class(filled.df)
ggplot(total.steps) +
geom_histogram(stat = "identity") +
labs(title = "Total Steps Taken Each Day",
x = "Date",
y = "Total steps")
rm(list=ls())
